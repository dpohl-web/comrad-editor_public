/* You can add global styles to this file, and also import other style files */
@use './variables' as *;
@use '@angular/material' as mat;
@use './my-theme' as *;
@use 'sass:map';
@use './app/quest-form/quest-form.component.scss-theme' as questform;
@include mat.core();
@import url('//fonts.googleapis.com/icon?family=Material+Icons');
@import 'nouislider/dist/nouislider.min.css';

// TODO(v15): As of v15 mat.legacy-core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.legacy-typography-hierarchy(mat.define-legacy-typography-config());`

// $primary: mat-palette($mat-lime, 500);
// $accent:  mat-palette($mat-lime, 500, A200, A400);
// $warn:    mat-palette($mat-red, 500);

// $config: mat-typography-config();

// $theme: mat-light-theme($primary, $accent, $warn);

// import custom componenet themes
// unofficial naming convention to support nice ordering of files in IDE
// to see theme under the original style file of the componenent


// $my-theme-primary: mat.define-palette(mat.$green-palette, 500);
// $my-theme-accent: mat.define-palette(mat.$light-green-palette, 500, A200, A400);
// $my-theme-warn: mat.define-palette(mat.$red-palette, 900);

// $my-theme: mat.define-light-theme((
//     color: (
//       primary: mat.define-palette(mat.$indigo-palette),
//       accent: mat.define-palette(mat.$pink-palette),
//     ),
//    ));




   $background: map.get($my-theme, background);

   $background-color: map-get($background, background);
//    @debug "Hintergrundfarbe: #{$background-color}";
// // create theme (use mat-dark-theme for themes with dark backgrounds)
// $my-theme: mat.define-light-theme($my-theme-primary, $my-theme-accent, $my-theme-warn);

@include mat.all-component-themes($my-theme);

// Definiere CSS-Klassen f√ºr die Hintergrundfarben
$red-palette: mat.$m2-red-palette;
$green-palette: mat.$m2-green-palette;


.ang-background-red-400 {
    background-color: map-get($red-palette, 400);
  }

.ang-background-green-400 {
    background-color: map-get($green-palette, 700);
}
  
//   .ang-background-primary {
//     background-color: $primary;
//   }

// @import './app/quest-form/quest-form.component.scss-theme';

// // you only have to add additional componenets here (instead of in every theme class)
// @mixin custom-components-theme($theme) {
// 	@include questform-component-theme($theme);
// }

// Apply the light theme by default
// @include mat.core-theme($my-theme);
// @include mat.button-theme($my-theme);

@mixin custom-components-theme($theme) {
    @include questform.questform-component-theme($theme);
  }

// specify theme class eg: <body class="my-theme"> ... </body>
.my-theme {
	// use our theme with angular-material-theme mixin
	@include custom-components-theme($my-theme);
}

// // Define an alternate dark theme.
// $dark-primary: mat.define-palette(mat.$blue-grey-palette);
// $dark-accent: mat.define-palette(mat.$amber-palette, A200, A100, A400);
// $dark-warn: mat.define-palette(mat.$deep-orange-palette);
// $dark-theme: mat.define-dark-theme($dark-primary, $dark-accent, $dark-warn);

// $dark-theme: mat.define-dark-theme((
//     color: (
//       primary: mat.define-palette(mat.$pink-palette),
//       accent: mat.define-palette(mat.$blue-grey-palette),
//     ),
//      // Only include `typography` and `density` in the default dark theme.
//      typography: mat.define-typography-config(),
//      density: 0,
//    ));

// Include the alternative theme styles inside of a block with a CSS class. You can make this
// CSS class whatever you want. In this example, any component inside of an element with
// `.unicorn-dark-theme` will be affected by this alternate dark theme instead of the default theme.
// .dark-theme {
// 	@include custom-components-theme($dark-theme);
// }



// // Apply the light theme only when the user prefers light themes.
// @media (prefers-color-scheme: dark) {
//     // Use the `-color` mixins to only apply color styles without reapplying the same
//     // typography and density styles.
//     @include mat.core-color($dark-theme);
//     @include mat.button-color($dark-theme);
//     @include mat.all-component-themes($dark-theme);
//    }

html,
body {
	height: 100%;
}
body {
	margin: 0;
	font-family: Roboto, 'Helvetica Neue', sans-serif;
}

app-root {
	ul {
		list-style: none;
		li {
			list-style: none;
		}
	}

	.mat-form-field-autofill-control {
		border: none;
	}

	input[type='text'].mat-input-element.mat-form-field-autofill-control {
		border: none;
	}
}

.example-form {
	min-width: 150px;
	max-width: 500px;
	width: 100%;
}

.example-full-width {
	width: 100%;
}

.mat-expansion-panel-body {
	> div {
		padding: $spacing--medium;
	}
}

.colorChooseButton {
	display: flex;
	width: $button-height;
	height: $button-height;
	justify-content: center;
	align-items: center;
	border-radius: 500px;
	cursor: pointer;

	span {
		cursor: pointer;
	}
}

color-picker {
	.color-picker {
		position: fixed;
		left: 50% !important;
		top: 50% !important;
		transform: translate3d(-50%, -50%, 0);
	}
}

.tinymce-character-warning {
	background: $orange-warning;
	padding: 20px;
	display: flex;
	justify-content: space-between;
	align-items: center;
}

.custom-mb {
	margin-bottom: $spacing--medium;
}

.custom-m {
	margin: $spacing--medium;
}

.custom-ml {
	margin-left: $spacing--medium;
}

// pre, [nouislider] {
// 	margin: 15px 0;
// }

// .jumbotron {
// 	background: #f5f5f5;
// 	border-bottom: 1px solid #eee;
// 	color: #333;
// 	margin-bottom: 0px;
// 	padding-top: 0px;
// 	padding-bottom: 15px;
// }

// .noUi-connect {
// 	background: #337ab7;
// }

.disable-all-events {
	pointer-events: none;
}

.expansion-panel-wrapper {
	&.expansion-panel-wrapper--category {
		> .mat-expansion-panel {
			&:hover {
				> .mat-expansion-panel-header {
					background: #81c784 !important;
				}
			}
		}
	}

	&.expansion-panel-wrapper--page {
		> .mat-expansion-panel {
			&:hover {
				> .mat-expansion-panel-header {
					background: #e59596 !important;
				}
			}
		}
	}
}

.cdk-drag-preview {
	box-sizing: border-box;
	border-radius: 4px;
	box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2), 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12);
}

.cdk-drag-placeholder {
	opacity: 0;
}

.cdk-drag-animating {
	transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

.example-box:last-child {
	border: none;
}

.droplist-segement.cdk-drop-list-dragging .drag-segement:not(.cdk-drag-placeholder) {
	transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

[disabled] .noUi-handle, [disabled].noUi-handle, [disabled].noUi-target {
    cursor: pointer;
  }
